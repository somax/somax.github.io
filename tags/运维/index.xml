<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>运维 on So&#39;Blog</title>
    <link>https://somax.me/tags/%E8%BF%90%E7%BB%B4/</link>
    <description>Recent content in 运维 on So&#39;Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Thu, 17 May 2018 13:08:30 +0000</lastBuildDate>
    
	<atom:link href="https://somax.me/tags/%E8%BF%90%E7%BB%B4/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>k8s 学习笔记</title>
      <link>https://somax.me/teambition/tb_5afd7ecef496bb0018d2e144/</link>
      <pubDate>Thu, 17 May 2018 13:08:30 +0000</pubDate>
      
      <guid>https://somax.me/teambition/tb_5afd7ecef496bb0018d2e144/</guid>
      <description>这篇文章（5afd7ecef496bb0018d2e144）是从 Teambition 迁移过来的
 安装 kubectl 启用命令自动补完 Zsh  官方文档： https://kubernetes.io/docs/tasks/tools/install-kubectl/
 If you are using zsh edit the ~/.zshrc file and add the following code to enable kubectl autocompletion:
if [ $commands[kubectl] ]; then source &amp;lt;(kubectl completion zsh) fi Or when using Oh-My-Zsh, edit the ~/.zshrc file and update the plugins= line to include the kubectl plugin.
source &amp;lt;(kubectl completion zsh) 安装 minikube  官方文档：https://kubernetes.io/docs/tasks/tools/install-minikube/#install-minikube
因为网络的原因，国内安装要用阿里改过的版本，参考：
 https://yq.</description>
    </item>
    
    <item>
      <title>内部并联网络打通配置方法</title>
      <link>https://somax.me/teambition/tb_5afd4b7f8fb0b000189366aa/</link>
      <pubDate>Thu, 17 May 2018 09:29:35 +0000</pubDate>
      
      <guid>https://somax.me/teambition/tb_5afd4b7f8fb0b000189366aa/</guid>
      <description>这篇文章（5afd4b7f8fb0b000189366aa）是从 Teambition 迁移过来的
 网络拓扑  [192.168.126.0] / \ [wan: 192.168.126.200] [wan: 192.168.126.233] TP-Link | | MiRoute Pro [lan: 192.168.123.0] [lan: 192.168.120.0]  目的 将 192.168.123.0网段与 192.168.120.0 网段相互打通。
配置方案 在两个子网路由器上分别设置静态路由，192.168.123.0 网段访问 192.168.120.0 配置路由指向 192.168.126.233 ，同理 192.168.120.0 网段访问 192.168.123.0 网段则配置路由指向 192.168.126.200
具体步骤 配置 TP-Link 路由器  添加静态路由规则：
 登录控制界面，选择 『传输控制』 - 『路由设置』-『静态路由』
 点选『新增』
   规则名称: to120 目的地址: 192.168.120.0 子网掩码: 255.255.255.0 下一跳: 192.168.126.233 出接口: WAN1  ​</description>
    </item>
    
    <item>
      <title>Gitlab 备份到 Minio 的配置方法</title>
      <link>https://somax.me/teambition/tb_5af07ebce98ef93186181ac0/</link>
      <pubDate>Mon, 07 May 2018 16:28:44 +0000</pubDate>
      
      <guid>https://somax.me/teambition/tb_5af07ebce98ef93186181ac0/</guid>
      <description>这篇文章（5af07ebce98ef93186181ac0）是从 Teambition 迁移过来的
  进入 Gitlab 容器操作：docker exec -it &amp;lt;container-id&amp;gt; bash
 编辑 /etc/gitlab/gitlab.rb
   gitlab_rails[&#39;backup_upload_connection&#39;] = { &#39;provider&#39; =&amp;gt; &#39;AWS&#39;, &#39;aws_access_key_id&#39; =&amp;gt; &#39;xxxxxxxxxxxxx&#39;, &#39;aws_secret_access_key&#39; =&amp;gt; &#39;xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx&#39;, &#39;endpoint&#39; =&amp;gt; &#39;http://minio-server-host:9000&#39;, &#39;path_style&#39; =&amp;gt; true } gitlab_rails[&#39;backup_upload_remote_directory&#39;] = &#39;bucket-name&#39;  注意事项：
 必须设置 &#39;path_style&#39; =&amp;gt; true aws_access_key_id 和 aws_secret_access_key 对应的是 Minio 的 Access Key 与 Secret Key，注意这两个值必须足够复杂，否则可能会导致 403 错误   重新配置 gitlab：gitlab-ctl reconfigure，配置正确的话会自动重启 Gitlab
 运行备份命令：gitlab-rake gitlab:backup:create</description>
    </item>
    
    <item>
      <title>容器中运行的 Gitlab 备份方法</title>
      <link>https://somax.me/teambition/tb_5ae1f9b051c9c600182a40aa/</link>
      <pubDate>Thu, 26 Apr 2018 16:09:20 +0000</pubDate>
      
      <guid>https://somax.me/teambition/tb_5ae1f9b051c9c600182a40aa/</guid>
      <description>  这篇文章（5ae1f9b051c9c600182a40aa）是从 Teambition 迁移过来的
 原文： https://docs.gitlab.com/omnibus/settings/backups.html#creating-backups-for-gitlab-instances-in-docker-containers
备份 Gitlab 数据 docker exec -t &amp;lt;your container name&amp;gt; gitlab-rake gitlab:backup:create 备份配置文件 docker exec -t &amp;lt;your container name&amp;gt; /bin/sh -c &amp;#39;umask 0077; tar cfz /secret/gitlab/backups/$(date &amp;#34;+etc-gitlab-%s.tgz&amp;#34;) -C / etc/gitlab&amp;#39;</description>
    </item>
    
    <item>
      <title>使用容器部署 openvpn</title>
      <link>https://somax.me/teambition/tb_5ad5ff7346021671da825337/</link>
      <pubDate>Tue, 17 Apr 2018 14:06:43 +0000</pubDate>
      
      <guid>https://somax.me/teambition/tb_5ad5ff7346021671da825337/</guid>
      <description>这篇文章（5ad5ff7346021671da825337）是从 Teambition 迁移过来的
部署过程使用了开源项目：kylemanna/docker-openvpn，详细文档请访问 https://github.com/kylemanna/docker-openvpn
  为数据卷选个名字存放到环境变量 $OVPN_DATA，建议使用 ovpn-data- 前缀来方便识别。在下面的示例中请替换 example。   OVPN_DATA=&amp;quot;ovpn-data-example&amp;quot;   初始化 $OVPN_DATA 容器，这个容器将用来存放配置文件与证书。 初始化过程中会提示输入密码来保护证书。下面的示例中请使用合适的域名或 IP 地址替换 VPN.SERVERNAME.COM。   docker volume create --name $OVPN_DATA docker run -v $OVPN_DATA:/etc/openvpn --rm kylemanna/openvpn ovpn_genconfig -u udp://VPN.SERVERNAME.COM docker run -v $OVPN_DATA:/etc/openvpn --rm -it kylemanna/openvpn ovpn_initpki   启动容器   docker run -v $OVPN_DATA:/etc/openvpn -d -p 1194:1194/udp --cap-add=NET_ADMIN kylemanna/openvpn   生成客户端证书（无密码）   docker run -v $OVPN_DATA:/etc/openvpn --rm -it kylemanna/openvpn easyrsa build-client-full CLIENTNAME nopass   导出客户端配置文件（包含证书）   docker run -v $OVPN_DATA:/etc/openvpn --rm kylemanna/openvpn ovpn_getclient CLIENTNAME &amp;gt; CLIENTNAME.</description>
    </item>
    
    <item>
      <title>Rancher 中 RethinkDB 集群节点无法启动故障排除</title>
      <link>https://somax.me/teambition/tb_5a0fe53a4da5ce0928d5f28d/</link>
      <pubDate>Sat, 18 Nov 2017 07:46:02 +0000</pubDate>
      
      <guid>https://somax.me/teambition/tb_5a0fe53a4da5ce0928d5f28d/</guid>
      <description>这篇文章（5a0fe53a4da5ce0928d5f28d）是从 Teambition 迁移过来的
 故障描述  之前 RethinkDB 按照 1 + 3 的模式集群部署成功，每个节点分别部署在不同的 host 上。由于某种未知原因，其中一台 host 在 Rancher 中失联，在连接恢复后该 host 上的 RethinkDB 就一直无法正常启动。  解决过程  首先检查了 RethinkDB 节点的日志，发现一切正常，但 Rancher UI 上的状态却一直显示不正常 在 RethinkDB 管理界面上有一瞬间看到了第三个节点加入，然后忽然又没了，推断该节点容器在被 Rancher 一直重启 检查 Rancher 基础服务，发现 Rancher/HealthCheck 处于不正常状态，尝试重启、删除都没有成功。 远程进入容器所在主机，用 docker 命令 kill，竟然没用 🤷‍♂️ Rancher 中停止主机，再删，还是没有用 🤷‍♀️ 要不重启主机？等下&amp;hellip;&amp;hellip; 还是先试试重启 docker 吧&amp;hellip;  解决方案  重启 Docker sudo systemctl restart docker  成功👌，Rancher 会帮我们把余下的事情做掉，所有的容器不出意外都会自动起来（事实上的确没出意外）。来再检查一下，HealthCheck ✅， RethinkDB ✅，搞定！</description>
    </item>
    
    <item>
      <title>ShadowSock 安装方法</title>
      <link>https://somax.me/teambition/tb_5645566510638ccf2327a70e/</link>
      <pubDate>Fri, 13 Nov 2015 03:17:57 +0000</pubDate>
      
      <guid>https://somax.me/teambition/tb_5645566510638ccf2327a70e/</guid>
      <description>这篇文章（5645566510638ccf2327a70e）是从 Teambition 迁移过来的
 Server Install Debian / Ubuntu:
apt-get install python-pip pip install shadowsocks  CentOS:
yum install python-setuptools &amp;amp;&amp;amp; easy_install pip pip install shadowsocks  Windows:
See [Install Server on Windows]
Usage ssserver -p 443 -k password -m aes-256-cfb  To run in the background:
sudo ssserver -p 443 -k password -m aes-256-cfb --user nobody -d start  To stop:
sudo ssserver -d stop  To check the log:</description>
    </item>
    
    <item>
      <title>Rsync 在非标ssh端口(22) 中用法</title>
      <link>https://somax.me/teambition/tb_560e1356d908de0d2585d058/</link>
      <pubDate>Fri, 02 Oct 2015 05:17:10 +0000</pubDate>
      
      <guid>https://somax.me/teambition/tb_560e1356d908de0d2585d058/</guid>
      <description>这篇文章（560e1356d908de0d2585d058）是从 Teambition 迁移过来的
 问题 使用rsync拷贝文件，有个主机的ssh端口使用的并非标准端口(22)，查看rsync的文档，看到有种带有端口的用法： rsync [OPTION]&amp;hellip; SRC [SRC]&amp;hellip; rsync://[USER@]HOST[:PORT]/DEST
但使用会返回错误： rsync: server sent &amp;ldquo;SSH-2.0-OpenSSH_5.3&amp;rdquo; rather than greeting rsync error: error starting client-server protocol (code 5) at main.c(1534) [sender=3.0.9]
解决 开始以为是客户端服务器rsync版本不兼容，后来发现对于非标准ssh端口(22)的使用方法是使用-e参数： rsync [OPTION]&amp;hellip; -e &amp;ldquo;ssh -p 2222&amp;rdquo; SRC [SRC]&amp;hellip; [USER@]HOST[:PORT]/DEST</description>
    </item>
    
    <item>
      <title>iptables 配置范例</title>
      <link>https://somax.me/teambition/tb_560b7b14262a98424070c7a7/</link>
      <pubDate>Wed, 30 Sep 2015 06:03:00 +0000</pubDate>
      
      <guid>https://somax.me/teambition/tb_560b7b14262a98424070c7a7/</guid>
      <description>这篇文章（560b7b14262a98424070c7a7）是从 Teambition 迁移过来的
 linux 系统中使用 iptables 配置防火墙
修改文件：/etc/sysconfig/iptables
*filter :INPUT ACCEPT [0:0] :FORWARD ACCEPT [0:0] :OUTPUT ACCEPT [0:0] -A INPUT -s 127.0.0.1/32 -d 127.0.0.1/32 -j ACCEPT -A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT -A INPUT -p tcp -m tcp --dport 22 -j ACCEPT -A INPUT -p tcp -m tcp --dport 80 -j ACCEPT -A INPUT -p tcp -m tcp --dport 443 -j ACCEPT -A INPUT -p tcp -m tcp --dport 21 -j ACCEPT -A INPUT -p tcp -m tcp --dport 20 -j ACCEPT -A INPUT -p tcp -m tcp --dport 8080 -j ACCEPT -A INPUT -j REJECT --reject-with icmp-port-unreachable -A FORWARD -j REJECT --reject-with icmp-port-unreachable -A OUTPUT -j ACCEPT COMMIT  重新启动 service iptables restart</description>
    </item>
    
    <item>
      <title>Linux Netcat 命令——网络工具中的瑞士军刀</title>
      <link>https://somax.me/teambition/tb_558829e6ddf0439e275133fa/</link>
      <pubDate>Mon, 22 Jun 2015 15:29:42 +0000</pubDate>
      
      <guid>https://somax.me/teambition/tb_558829e6ddf0439e275133fa/</guid>
      <description>这篇文章（558829e6ddf0439e275133fa）是从 Teambition 迁移过来的
 http://www.oschina.net/translate/linux-netcat-command
快看，绝对值得学习！</description>
    </item>
    
    <item>
      <title>修正 虚拟机中 CentOS7 系统时间</title>
      <link>https://somax.me/teambition/tb_5555a840886052772bc70db3/</link>
      <pubDate>Fri, 15 May 2015 08:03:12 +0000</pubDate>
      
      <guid>https://somax.me/teambition/tb_5555a840886052772bc70db3/</guid>
      <description>这篇文章（5555a840886052772bc70db3）是从 Teambition 迁移过来的
 刚才在虚拟机中（ Centos） 安装后提示系统时间不正确，通过 date 命令查看返回：2015年2月1日（原因不明），通过hwclock 查硬件时间，返回是正确的，查了一下hwclock 帮助，其中有一条：-s, --hctosys 从硬件时钟设置系统时间。运行后，再用 date 检查，系统时间正确了！</description>
    </item>
    
  </channel>
</rss>