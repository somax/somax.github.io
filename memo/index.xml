<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>学习备忘录 on So&#39;Blog</title>
    <link>https://somax.me/memo.html</link>
    <description>Recent content in 学习备忘录 on So&#39;Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Mon, 02 Jul 2018 09:52:51 +0800</lastBuildDate>
    
	<atom:link href="https://somax.me/memo/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>（译）如何用视觉类比来思考 - 图表</title>
      <link>https://somax.me/memo/how-to-think-visually.html</link>
      <pubDate>Mon, 02 Jul 2018 09:52:51 +0800</pubDate>
      
      <guid>https://somax.me/memo/how-to-think-visually.html</guid>
      <description>这是我目前看到最好的一篇关于数据可视化图表的文章，所以花点时间翻译了一下，并在此转发。
 水平有限，翻译过程得到了 谷歌翻译 的帮助，如有不妥请在文章底部留言。
原文：https://blog.adioma.com/how-to-think-visually-using-visual-analogies-infographic/
原作者：Anna Vital
 视觉学习者是那些用图像思考1并用语言与其他人交流那张图片的人。 世界上约有60％ 2的人是视觉学习者。 （我是他们中的一员，我猜，既然你正在阅读这篇文章，你也是一样，我们中的很多人还不知道我们是视觉学习者，因为学校迫使我们大部分时间在基于文本学习。）
那么，你如何通过图像和文字与我们交谈？ 使用普遍存在的『视觉符号』和『类比』。 下图是它们的排列组合。
视觉交流的关键在于寻找普遍存在并且无需解释的视觉符号。
大多数认知科学研究探讨了我们如何看待事物，但很少研究我们如何『理解』我们所看到的。
『理解』是对你可视化效果的终极考验。 那么，你如何让人们明白？ 展示一些大家熟悉的『 类比』。如果你对可视化并不了解，可是却选择正确的『类比』，那么你已经成功了一大半了。 这就是专业设计师所做的 - 没有其他可以替代『类比』。
你如何选择正确的『类比』？ 在下面的表格中，我从抽象到具象整理了『类比』的形式。 我将它们按形状相似性分组。 目标是可以让你快速在你的『信息』上『试用』。 随着时间的推移，你将能够在你的脑海中做到这一切。 但现在这是一条捷径。
让我们从简单和抽象开始。
图表，图形和示意图 我们从圆形开始。 （宇宙中的大部分东西都是圆的！）
   图示 说明      1. 饼图( Pie Chart)： 最受欢迎同时也最受质疑。 正如Edward Tufte所说，“&amp;hellip;&amp;hellip;比一张饼图差的东西只有『很多』”。 现代信息图的父亲Otto Neurath也拒绝使用更多语义图标的饼图。 饼图分为两部分时最好使用：我吃过的派和我离开的派。 有了两个部分，你仍然可以轻松地比较切片的大小 - 这在两个以上的情况下变得困难，因此受到了批评。 一旦你有三个或更多的部分，你有一个比较问题 - 我们的眼睛不习惯比较一个圆的部分。 我们也不擅长比较不同的饼图。 当然饼图仍然有一些适合的场景，但很少。 *例如：我在 “七十亿人做什么” 图表以及 启动资金如何显示创始人股权比例 中使用它*。    2.</description>
    </item>
    
    <item>
      <title>用 SSH 建立安全隧道</title>
      <link>https://somax.me/memo/ssh-tunneling.html</link>
      <pubDate>Thu, 14 Jun 2018 15:19:06 +0800</pubDate>
      
      <guid>https://somax.me/memo/ssh-tunneling.html</guid>
      <description>参考：https://forwardhq.com/help/ssh-tunneling-how-to
 使用 SSH 能够安全地访问远程服务器，同时 SSH 也有一些鲜为人知的特点。其中一个很厉害功能就是隧道。
隧道允许你将远程服务器上的一个端口转发到本地服务器上的一个端口。这对于web开发者尤其有用，它允许你在本地Web服务器和互联网之间创建一个隧道，在互联网的任何地方都可以通过这个隧道访问您的本地应用程序或网站。
这篇文章介绍如何利用 SSH Tunneling 突破防火墙建立远程链接。
大致流程如下：
{ 私有服务器 } ---- 发起 ssh tunneling ---&amp;gt; { 公开服务器 } &amp;lt;----- { 客户机 }  前置条件  你需要有一个可公开访问的服务器，可以是任何一种服务器只要有安装有 SSH 服务。
 你还需要设置SSH服务器的配置文件，添加 GatewayPorts yes。
 配置文件通常是位于/etc/ssh/sshd_config，可能取决于您的系统的不同。修改后，一定要重新启动SSH服务，运行 sudo service sshd restart
 为了保持连接防止超时断开，还需要在配置中添加 ClientAliveInterval 60
 ClientAliveInterval 指定了服务器端向客户端请求消息的时间间隔, 默认是0，不发送。而ClientAliveInterval 60表示每 60 秒发送一次，然后客户端响应，这样就保持长连接了。
另外ClientAliveCountMax 使用默认值 3 即可。ClientAliveCountMax 表示服务器发出请求后客户端没有响应的次数达到一定值，就自动断开。
  修改配置  先查看当前配置
cd /etc/ssh sudo grep &amp;#34;ClientAlive&amp;#34; sshd_config #ClientAliveInterval 0 #ClientAliveCountMax 3 备份配置</description>
    </item>
    
    <item>
      <title>Typora 使用小技巧</title>
      <link>https://somax.me/memo/typora-tips.html</link>
      <pubDate>Sun, 10 Jun 2018 14:36:06 +0800</pubDate>
      
      <guid>https://somax.me/memo/typora-tips.html</guid>
      <description>Typora 是一款非常好用跨平台 Markdown 编辑器。和很多类似的软件一样使用 Web 技术开发，并使用 Electron 封装成桌面应用，目前 beta 版可以免费下载使用，写这篇博客的时版本是 0.9.9.16.2。
Typora 新版本增加了很多功能，这里记录一下个人在使用过程中的一些偏好设置与小技巧（基于 MacOS）。
命令行启动 很多时候工作流程会使用 git 命令对文档进行版本管理，为了快速的在命令行启动 Typora，我通过添加别名t来快速启动 Typora。在 ~/.bash_profile 中添加 alias t=&amp;quot;open -a typora&amp;quot;，执行source ~/.bash_profile后，就可以在命令行中运行 t path/to/filename.md 以快速打开并开始编辑文件。
新版 Typora 支持了文件夹模式，所以可以运行t path 打开整个文件夹，或者 用t . 打开当前文件夹。
，偏好设置 按 Command + , 打开偏好设置面板。
 偏好设置可以根据个人喜好的设置，这里列出了一些我自己的喜好，也许在今后的深入使用过程中会更改这些设置。
 自定义主题  可以在偏好设置面板点击『打开主题文件夹』查看所有样式文件，详细说明查看官方文档：https://support.typora.io/Add-Custom-CSS/
 我比较喜欢 github 主题，但我希望改变一下背景颜色，让眼睛更舒适，在主题文件夹新建 github.user.css文件，添加如下代码：
body{ background-color: #f3f2ee; } @media print { body{ background-color: #fff; } } 然后再新增 base.user.css 文件，在里面添加一些自定义的样式，这个文件是针对所有主题都起作用的。</description>
    </item>
    
    <item>
      <title>将 Teambition 分享迁移到 hugo</title>
      <link>https://somax.me/memo/export-from-teambition.html</link>
      <pubDate>Wed, 23 May 2018 23:06:25 +0800</pubDate>
      
      <guid>https://somax.me/memo/export-from-teambition.html</guid>
      <description>Teambition 是一个非常好的团队协作工具，公司内部一直使用它做项目管理和知识分享的平台。
经过几年的积累，在公司 TB 知识管理项目中已经发布了三百来条分享记录（自己都没想到有这么多了），其中有很多是可以公开的，所以利用之前研究 TB API 的项目的基础上，完成了批量导出并自动生成 hugo 格式文档的工具 somax/teambition-sync 。
虽然 hugo 生成 300 篇文章只需要 2250ms，不过还是需要人工筛选一下，后续会慢慢（也许很快）上传到 这里。</description>
    </item>
    
    <item>
      <title>建站笔记 - 将网站托管到 Github</title>
      <link>https://somax.me/memo/host-on-github.html</link>
      <pubDate>Mon, 21 May 2018 16:41:58 +0800</pubDate>
      
      <guid>https://somax.me/memo/host-on-github.html</guid>
      <description>有很多使用 github pages 功能免费发布网站的教程，也可以直接看 官方文档，就不再赘述了。
github 设定 有一些注意事项这里提一下，根据 github 的规定，使用 &amp;lt;用户名&amp;gt;.github.io 作为项目名称，就可以通过 &amp;lt;用户名&amp;gt;.github.io 这个域名访问到网站，所以我的是就是 somax.github.io。
hugo 渲染页面默认会输出到 public 目录，想了个方案来管理源文件和最终静态网站文件：
 在项目中建立 master 及 src 两个分支，master 分支用来放最终静态网站文件，而 src 分支存放源文件 在 src 分支上，添加 public 目录到 .gitignore 以便提交源码时忽略它 然后在 public 目录中重新 git init 并存放 master 分支  这样就很方便了，源码在主目录操作，hugo 命令渲染好在进入 public 提交静态页面代码。
域名设置 想要 .IO 或者 .ME 的域名，找了一下国内域名供应商视乎没有提供。最后在 godaddy.com 购买了 somax.me，第一年 6 折，2年共 ￥150.99。
购买成功后，进入 DNS 管理界面进行 DNS 配置：
   类型 名称 值 TTL     A @ 185.</description>
    </item>
    
    <item>
      <title>建站笔记 - 使用 hugo 建立我的博客</title>
      <link>https://somax.me/memo/building-soblog-with-hugo.html</link>
      <pubDate>Mon, 21 May 2018 14:01:10 +0800</pubDate>
      
      <guid>https://somax.me/memo/building-soblog-with-hugo.html</guid>
      <description>这是 开篇 之后的第一篇博客，记录一下建立这个博客网站的过程应该是个不错的选择。
 前言 其实很久之前就有看到别人使用 Github Pages + jekyll 来免费搭建自己的博客网站，不过最近由于工作的原因接触 go 语言的项目越来越多，所以特意查了一下 Go 语言相关的建站工具，发现了 hugo 这个项目。 就毫不犹豫的（其实还是纠结了一下）选择了 hugo。原因主要是 开源，跨平台，安装简单，渲染速度快！官方自称：&amp;rdquo;The world’s fastest framework for building websites&amp;ldquo;
使用 Hugo 建立网站 过程中参考了官方文档，还有个老兄建立了中文版的网站 http://gohugo.org 也给了很大帮助。
不过作为学习总结，还是记录一下自己的操作过程。
安装 Hugo hugo 官网访问很慢，还是直接 github release 下载比较快。根据操作系统选择合适版本下载即可（由于 Go语言的特性，天生跨平台，可以选择 ARM 版本来安装到树莓派上玩耍），具体过程就略了。
新建站点 按照 快速手册 一步步下来，基本上没什么问题。
 hugo 安装完成一定要选择一个 Theme（或者自建&amp;ndash;如果觉得自己可以的话），并且根据 Theme 的说明配置好 config.toml 文件，否则可能只能看到不完整的网站。
 https://themes.gohugo.io/minimo/ 看上去不错，比较简洁，很适合做日志型网站。
文档 一定要先看一遍，避免走弯路（因为我已经走了🕺）。
修改配置  从 minimo theme 的 exampleSite 目录中复制 config.</description>
    </item>
    
  </channel>
</rss>