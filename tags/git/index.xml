<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Git on So&#39;Blog</title>
    <link>https://somax.me/tags/git/</link>
    <description>Recent content in Git on So&#39;Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Mon, 21 May 2018 16:41:58 +0800</lastBuildDate>
    
	<atom:link href="https://somax.me/tags/git/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>建站笔记 - 将网站托管到 Github</title>
      <link>https://somax.me/memo/host-on-github/</link>
      <pubDate>Mon, 21 May 2018 16:41:58 +0800</pubDate>
      
      <guid>https://somax.me/memo/host-on-github/</guid>
      <description>有很多使用 github pages 功能免费发布网站的教程，也可以直接看 官方文档，就不再赘述了。
有一些注意事项这里提一下，根据 github 的规定，使用 &amp;lt;用户名&amp;gt;.github.io 作为项目名称，就可以通过 &amp;lt;用户名&amp;gt;.github.io 这个域名访问到网站，所以我的是就是 somax.github.io。
hugo 渲染页面默认会输出到 public 目录，想了个方案来管理源文件和最终静态网站文件：
 在项目中建立 master 及 src 两个分支，master 分支用来放最终静态网站文件，而 src 分支存放源文件 在 src 分支上，添加 public 目录到 .gitignore 以便提交源码时忽略它 然后在 public 目录中重新 git init 并存放 master 分支  这样就很方便了，源码在主目录操作，hugo 命令渲染好在进入 public 提交静态页面代码。
域名设置 想要 .IO 或者 .ME 的域名，找了一下国内域名供应商视乎没有提供。最后在 godaddy.com 购买了 somax.me，第一年 6 折，2年共 ￥150.99。
购买成功后，进入 DNS 管理界面进行 DNS 配置：
   类型 名称 值 TTL     A @ 185.</description>
    </item>
    
    <item>
      <title>Git 基础 - 撤消操作</title>
      <link>https://somax.me/teambition/tb_55725a70de2b610a3a774d29/</link>
      <pubDate>Sat, 06 Jun 2015 02:26:56 +0000</pubDate>
      
      <guid>https://somax.me/teambition/tb_55725a70de2b610a3a774d29/</guid>
      <description>这篇文章（55725a70de2b610a3a774d29）是从 Teambition 迁移过来的
 2.4 Git 基础 - 撤消操作 撤消操作 任何时候，你都有可能需要撤消刚才所做的某些操作。接下来，我们会介绍一些基本的撤消操作相关的命令。请注意，有些撤销操作是不可逆的，所以请务必谨慎小心，一旦失误，就有可能丢失部分工作成果。
修改最后一次提交 有时候我们提交完了才发现漏掉了几个文件没有加，或者提交信息写错了。想要撤消刚才的提交操作，可以使用 &amp;ndash;amend 选项重新提交： $ git commit &amp;ndash;amend
此命令将使用当前的暂存区域快照提交。如果刚才提交完没有作任何改动，直接运行此命令的话，相当于有机会重新编辑提交说明，但将要提交的文件快照和之前的一样。
启动文本编辑器后，会看到上次提交时的说明，编辑它确认没问题后保存退出，就会使用新的提交说明覆盖刚才失误的提交。
如果刚才提交时忘了暂存某些修改，可以先补上暂存操作，然后再运行 --amend 提交：
$ git commit -m &#39;initial commit&#39; $ git add forgotten_file $ git commit --amend  上面的三条命令最终只是产生一个提交，第二个提交命令修正了第一个的提交内容。
下一页
官方电子书 中文版</description>
    </item>
    
    <item>
      <title>可以在树梅派上运行的自助Git托管服务 Gogs</title>
      <link>https://somax.me/teambition/tb_55609bd172999d1b2faf7492/</link>
      <pubDate>Sat, 23 May 2015 15:25:05 +0000</pubDate>
      
      <guid>https://somax.me/teambition/tb_55609bd172999d1b2faf7492/</guid>
      <description>这篇文章（55609bd172999d1b2faf7492）是从 Teambition 迁移过来的
 http://gogs.io/
基于 Go 语言的自助 Git 托管服务易安装、跨平台、轻量级、开源化</description>
    </item>
    
    <item>
      <title>git简介</title>
      <link>https://somax.me/teambition/tb_55265335879013c64ac090a2/</link>
      <pubDate>Thu, 09 Apr 2015 10:23:49 +0000</pubDate>
      
      <guid>https://somax.me/teambition/tb_55265335879013c64ac090a2/</guid>
      <description>这篇文章（55265335879013c64ac090a2）是从 Teambition 迁移过来的
 更新 (20160429)：最好的Git 电子书&amp;nbsp;https://git-scm.com/book/&amp;nbsp;（在线或下载）什么是 GitGIT不仅仅是个版本控制系统，它也是个内容管理系统(CMS),工作管理系统等。
Git vs SVNGit 是分布式的，SVN不是&amp;nbsp;SVN 必须连接服务器才能提交变更； Git 在本地有完整版本库的 &amp;ldquo;clone&amp;rdquo;,允许离线提交变更和管理分支，然后push到远程库
GIT把内容按元数据方式存储，而SVN是按文件&amp;nbsp;Git会在本地存储所有东西，包括标签，分支，版本记录 SVN只在本地存储一个工作副本。
GIT分支和SVN的分支不同&amp;nbsp;SVN中分支就是版本库中的另外的一个目录； GIT的分支可以从同一个工作目录下快速的在几个分支间切换。
GIT没有一个全局的版本号，而SVN有&amp;nbsp;SVN里使用容易阅读的数字版本号，Git使用SHA-1来唯一的标识一个代码快照
GIT的内容完整性要优于SVN&amp;nbsp;GIT的内容存储使用的是SHA-1哈希算法,确保在遇到磁盘故障和网络问题时降低对版本库的破坏。
Internet上开放的git仓库国外：gitHub、gitLab &amp;hellip;国内：coding、gitcafe &amp;hellip;私有gitgitLabCE： http://git.jkr3.com限内部访问，自行注册，注意：确认邮件99%可能会进垃圾邮件
客户端&amp;ldquo;建议学习命令方式&amp;rdquo;，熟悉之后非常快捷，mac或linux中可以使用自带 git 命令，通过&amp;nbsp;git help&amp;nbsp;获得帮助。
windows系统可以选择tortoiseGit，适合原来使用tortoiseSVN的用户，有中文语言包
http://git-scm.com/downloadshttp://git-scm.com/downloads/guishttps://code.google.com/p/tortoisegit/Git的基本流程和使用方法这里只介绍命令方式，在线试玩：&amp;nbsp;GitTryIt
初始化&amp;nbsp;git init查看状态&amp;nbsp;git status&amp;nbsp;添加文件&amp;nbsp;git add README.md&amp;nbsp;/&amp;nbsp;git add *.js提交代码&amp;nbsp;git commit -m &amp;ldquo;添加 Readme&amp;rdquo;&amp;nbsp;&amp;nbsp;{学习:&amp;nbsp;Markdown}查看日志&amp;nbsp;git log远程库添加&amp;nbsp;git remote add origin http://git.jkr3.com/username/demo.git&amp;nbsp;{注意：远程库需要事先在网站上新建好}推送到远程库&amp;nbsp;git push -u origin master从远程库拉回&amp;nbsp;git pull origin master检查改变&amp;nbsp;git diff HEAD放弃提交&amp;nbsp;git reset file.txt恢复到最后版本&amp;nbsp;git checkout &amp;ndash; file.txt建立分支&amp;nbsp;git branch fixbug切换到分支&amp;nbsp;git checkout fixbug删除文件&amp;nbsp;git rm bug.txt合并&amp;nbsp;git checkout master&amp;nbsp;,&amp;nbsp;git merge fixbug删除分支&amp;nbsp;git branch -d fixbug最后推送到服务器&amp;nbsp;git push从SVN迁移到git实际上svn和git在本地是可以共存的</description>
    </item>
    
  </channel>
</rss>